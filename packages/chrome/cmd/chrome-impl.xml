<project name="chrome-impl" basedir=".">

	<target name="-init-chrome">
		<script language="javascript">
			<![CDATA[
				project.setProperty(
					"app.microloader.bootstrap",
					project.getProperty("workspace.packages.dir") + "/chrome/core/null.js"
				);
			]]>
		</script>
	</target>

	<target name="-init-chrome-root" depends="-init-chrome">
		<script language="javascript">
			<![CDATA[
				project.setProperty("chrome.frame.type", "root");
				project.setProperty("enable.ext41.themes", "false");
				project.setProperty("enable.ext42.themes", "false");
				project.setProperty("skip.sass", "true");
				project.setProperty("skip.slice", "true");
				project.setProperty("skip.theme", "true");
			]]>
		</script>
	</target>

	<target name="-init-chrome-sandbox" depends="-init-chrome">
		<script language="javascript">
			<![CDATA[
				project.setProperty("chrome.frame.type", "sandbox");
			]]>
		</script>
	</target>

	<target name="-init-chrome-js">
		<if>
			<isset property="chrome.frame.type" />
			<then>
				<property name="chrome.compile.scope" value="framework" />

				<property name="chrome.compile.scope.add">
					--name=${chrome.compile.scope}
				</property>
				<property name="chrome.compile.scope.require">
					--scopeName=${chrome.compile.scope}
				</property>
			</then>
			<else>
				<property name="chrome.compile.scope.add" value="" />
				<property name="chrome.compile.scope.require" value="" />
			</else>
		</if>

		<!-- Set build order modifications -->
		<x-compile refid="${compiler.ref.id}">
			<![CDATA[
				classpath
					${chrome.compile.scope.add}
					--path=${workspace.packages.dir}/chrome/core
				and
				require
					${chrome.compile.scope.require}
					--source=Ext.util.Observable
					--requires=@chrome-core
			]]>
		</x-compile>

		<!-- Compile root set -->
		<x-compile refid="${compiler.ref.id}">
			<![CDATA[
				union
					--tag=chrome-root
					--recursive
				and
				exclude
					--namespace=Chrome.sandbox
				and
				include
					--tag=core
				and
				save
					root
				and
				union
					--not
					--namespace=Ext
				and
				include
					--tag=core
				and
				exclude
					--tag=dom
				and
				include
					--namespace=Ext.util.DelayedTask,Ext.util.Event,Ext.util.HashMap
				and
				exclude
					--class=Ext.Template,Ext.XTemplate,Ext.XTemplateCompiler,Ext.XTemplateParser
				and
				save
					nondom
				and
				intersect
					--sets=root,nondom
				and
				save
					chrome-root
			]]>
		</x-compile>

		<!-- Compile sandbox set -->
		<x-compile refid="${compiler.ref.id}">
			<![CDATA[
				union
					--file=core/sandbox.js
					--recursive
				and
				exclude
					--namespace=Chrome.root
				and
				include
					--tag=core
				and
				save
					chrome-sandbox
			]]>
		</x-compile>
	</target>

	<target name="-chrome-js" depends="-init-chrome-js">
		<if>
			<equals arg1="${chrome.frame.type}" arg2="root"/>
			<then>
				<property name="chrome.filter">
					save
						page
					and
					intersect
						--sets=page,nondom
					and
				</property>
			</then>
			<else>
				<property name="chrome.filter" value=""/>
			</else>
		</if>

		<x-compile refid="${compiler.ref.id}">
			<![CDATA[
				restore
					page
				and
				meta
					-filenames
					-json
					-out=${build.dir}/page.json
				and
				include
					--set=chrome-${chrome.frame.type}
				and
				${chrome.filter}
				save
					page
				and
				meta
					-filenames
					-json
					-out=${build.dir}/combined.json
			]]>
		</x-compile>
	</target>

</project>